Comment !
 Program:    Boolean_Calculator.asm
 Student:     Bryan Oliande
 Date Due:        3/17/15
 Class:       CSCI 241
 Instructor:  Mr. Ding
Description: Continue the solution program from the preceding
exercise by implementing the following procedures:

- AND_op: Prompt the user for two hexadecimal integers. AND them
  together and display the result in hexadecimal.
- OR_op: Prompt the user for two hexadecimal integers. OR them
  together and display the result in hexadecimal.
- NOT_op: Prompt the user for a hexadecimal integer. NOT the
  integer and display the result in hexadecimal.
- XOR_op: Prompt the user for two hexadecimal integers. Exclusive-OR
  them together and display the result in hexadecimal.
!
INCLUDE Irvine32.inc

.data
msgMenu BYTE "---- Boolean Calculator ----------",0dh,0ah
   BYTE 0dh,0ah
   BYTE "1. x AND y"     ,0dh,0ah
   BYTE "2. x OR y"      ,0dh,0ah
   BYTE "3. NOT x"       ,0dh,0ah
   BYTE "4. x XOR y"     ,0dh,0ah
   BYTE "5. Exit program",0

msgAND BYTE "Boolean AND",0
msgOR  BYTE "Boolean OR",0
msgNOT BYTE "Boolean NOT",0
msgXOR BYTE "Boolean XOR",0

msgINVALID BYTE "You entered invalid input, try again!",0,0dh,0ah

msgOperand1 BYTE "Input the first 32-bit hexadecimal operand:  ",0
msgOperand2 BYTE "Input the second 32-bit hexadecimal operand: ",0
msgResult   BYTE "The 32-bit hexadecimal result is:            ",0

caseTable BYTE '1'   ; lookup value
		  DWORD _AND_op ; address of procedure
EntrySize = ($ - caseTable)
		  BYTE '2'
		  DWORD _OR_op
		  BYTE '3'
		  DWORD _NOT_op
		  BYTE '4'
		  DWORD _XOR_op
		  BYTE '5'
		  DWORD _ExitProgram
NumberOfEntries = ($ - caseTable) / EntrySize

.code
main08stub PROC

   ; Show menu in a loop
Menu:
	mov edx,OFFSET msgMenu ; ask user for input
	call WriteString
	call crlf
	

L1:   
   ; Call ReadChar to get the input
   call ReadChar ; read character into AL
   call crlf

   ; verify the input
    cmp al,'1'
	jb Invalid ; input was below 1
	cmp al,'5'
	ja Invalid ; input was above 5

   ; Call ChooseProcedure
   call _ChooseProcedure

   ; if CF set, exit
   jc Quit

   ; otherwise display menu again
   jmp Menu


Invalid:
	mov edx,OFFSET msgINVALID
	call WriteString
	call crlf
	jmp Menu
Quit:
	exit
main08stub ENDP

;------------------------------------------------
_ChooseProcedure PROC
;
; Selects a procedure from the caseTable
; Receives: AL is the number of operation the user entered
; Returns: if CF set, exit; else continue 
;------------------------------------------------
mov ebx,OFFSET caseTable ; point EBX to the table
mov ecx,NumberOfEntries ; loop counter

L1:
	cmp al,[ebx] ; match found?
	jne L2 ; no: continue
	call NEAR PTR [ebx + 1] ; yes: call the procedure
	jmp L3 ; exit the search

L2:
	add ebx,EntrySize ; point to the next entry
	loop L1

L3:
	ret
_ChooseProcedure ENDP

;------------------------------------------------
_AND_op PROC
;
; Performs a boolean AND operation
; Receives: Nothing
; Returns: Nothing
;------------------------------------------------
mov edx,OFFSET msgAND
call WriteString
call crlf

mov edx,OFFSET msgOperand1 ;prompt for first input
call WriteString
call ReadHex ;user input stored in EAX
mov ebx,eax ;so eax has room for 2nd input

mov edx,OFFSET msgOperand2 ;prompt for 2nd input
call WriteString
call ReadHex ;user input stored in EAX

and eax,ebx

mov edx,OFFSET msgResult
call WriteString
call WriteHex ;outputs the hex# in eax
call crlf
call crlf

clc ;so the loop in main does not quit

ret
_AND_op ENDP

;------------------------------------------------
_OR_op PROC
;
; Performs a boolean OR operation
; Receives: Nothing
; Returns: Nothing
;------------------------------------------------
mov edx,OFFSET msgOR
call WriteString
call crlf

mov edx,OFFSET msgOperand1 ;prompt for first input
call WriteString
call ReadHex ;user input stored in EAX
mov ebx,eax ;so eax has room for 2nd input

mov edx,OFFSET msgOperand2 ;prompt for 2nd input
call WriteString
call ReadHex ;user input stored in EAX

or eax,ebx

mov edx,OFFSET msgResult
call WriteString
call WriteHex ;outputs the hex# in eax
call crlf
call crlf

clc ;so the loop in main does not quit

ret
_OR_op ENDP

;------------------------------------------------
_NOT_op PROC
;
; Performs a boolean NOT operation.
; Receives: Nothing
; Returns: Nothing
;------------------------------------------------
mov edx,OFFSET msgNOT
call WriteString
call crlf

mov edx,OFFSET msgOperand1 ;prompt for first input
call WriteString
call ReadHex ;user input stored in EAX

not eax

mov edx,OFFSET msgResult
call WriteString
call WriteHex ;outputs the hex# in eax
call crlf
call crlf


clc ;so the loop in main does not quit

ret
_NOT_op ENDP

;------------------------------------------------
_XOR_op PROC
;
; Performs an Exclusive-OR operation
; Receives: Nothing
; Returns: Nothing
;------------------------------------------------
mov edx,OFFSET msgXOR
call WriteString
call crlf

mov edx,OFFSET msgOperand1 ;prompt for first input
call WriteString
call ReadHex ;user input stored in EAX
mov ebx,eax ;so eax has room for 2nd input

mov edx,OFFSET msgOperand2 ;prompt for 2nd input
call WriteString
call ReadHex ;user input stored in EAX

xor eax,ebx

mov edx,OFFSET msgResult
call WriteString
call WriteHex ;outputs the hex# in eax
call crlf
call crlf
clc ;so the loop in main does not quit

ret
_XOR_op ENDP

;------------------------------------------------
_ExitProgram PROC
;
; Receives: Nothing
; Returns: Sets CF = 1 to signal end of program
;------------------------------------------------
stc ;so the loop in main DOES quit

ret
_ExitProgram ENDP

END main08stub